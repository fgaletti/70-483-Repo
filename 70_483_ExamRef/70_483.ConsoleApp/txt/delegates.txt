Delagates


 Action delegates -> represent a reference to a method that do not return a value
     
   Alarm
	public Action OnAlarmRised {get; set}
	
   public void RaisedAlarm()
	{
	   if (OnAlarmRised  !- null)
	   	OnAlarmRised ();
	}	

  -Program
	
	void AlarListener1 ()
	 {
	    write" alarm1"
	}

	void AlarListener2 ()
	 {
	    write" alarm2"
	}

	MAIN
	 {
	    Alarm alarm = new Alarm();
	    alarm.OnAlarmRised  +=  AlarListener1 ;
	    alarm.OnAlarmRised  +=  AlarListener2 ;
			
	    // Rais the Alarm
	   alarm.RaisedAlarm();
           write" alarm Raised"
	 }


 Events: anyone can call public delegate

  *adding event Before Action 
	-> Now is a DataField (not a property)
 
	->Delefate can only be called from within the class

	public event Action OnAlarmRaised = delegate
	
	void RaisedAlarm()
	 {
	   OnAlarmRaised();
	
	
     EVENTS WITH BUILT-IN DELEGATES TYPES

	-Programs that use events should use the EventHandler Class instead of action
	
	EventHandler Class : DESING TO allo subscribers to be given data about an event
           -> can deliver data

	Class Alart
	  public event EventHandler OnAlarmRaised = delegate {}

	  void RaisedAlarm()
	 {
	   OnAlarmRaised(this, EventArgs.Empty);
	}

	 }

	Class Program
	 {
	    //accept t2o parameters
	    public void AlarmListerern1(object sender, EventsArgs e)
	      ...

	EventsArgs : provide info about the event
		EventArgs.Empty does not produce any data

  EXCEPTIONS

     Event handled can be called individually andf then a single Aggregate
		Eception created with details

	-GETINVOCATIONLIST ->
	       Used on the delegate to obtain a list of subscribers to the event
		    foreach (Delegate handler in OnAlarmRaised.GetInvocationList())
			    handler.DynamicInvoke(this, new AlarmEventArgs(location));

		       -> DynamicInvoke -> called for each subscriber

			 ->TypeInvocationException 


	CREATE DELEGATES

	-   public  delegate int IntOperation(int a, int b);

	 public static int Substract(int a, int b)
        {
            Console.WriteLine("Substract called");
            return a - b;
        }

		MAIN
		 {
		    IntOperation intOP = new IntOperation(Substract);
            int resta = intOP(2, 4);
		 }

	LAMBDA
	

		 IntOperation add = (a, b) => a + b;
	

	CLOSURES

	   -The code in a lambda expression can access variables in the code around it. These variables must be available when the lambda expression runs, so the compiler will extend the lifetime of variables used in lambda expressions.

	BUILT IN TYPES WITH LAMBDA EXPRESIONS

	delegate int IntOperation(int a, int b);
	IntOperation add = (a, b) => a + b;
	Console.WriteLIne(add(2,2);

	There are a number of “built-in” delegate types that we can use to provide a context for a lambda expression.

       Func<int,int,int> add = (a, b) => a + b;

	   Func -> Encapsulates a method that has one parameter and returns a value of the type specified by the TResult parameter.

	   **Multicast : a delegate instance can reference not just a single method , but also a list of target methods

	   delegaets are Inmutable : + : creating a new instance of a delegate
